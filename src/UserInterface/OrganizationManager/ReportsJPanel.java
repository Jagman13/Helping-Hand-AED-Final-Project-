/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.OrganizationManager;

import Business.Enterprise.Enterprise;
import Business.Inventory.Inventory;
import Business.Organization.ManagerOrganization;
import Business.Organization.Organization;
import Business.Organization.SeedOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SeedWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author ira
 */
public class ReportsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReportsJPanel
     */
    private JPanel userProcessContainer; 
    private UserAccount account;
    private ManagerOrganization organization;
    private Enterprise enterprise;
   

    public ReportsJPanel(JPanel userProcessContainer, UserAccount account, ManagerOrganization organization, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.organization=organization;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
   public Map<Integer,String> getSeedList(){
        Map<Integer,String> inventoryList = new HashMap<Integer,String>();
        ManagerOrganization manager;
        int index=0;
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(org instanceof ManagerOrganization) {
                        manager = (ManagerOrganization) org ; 
                        for (Inventory inventory :manager.getInventoryList().getInventoryList()){
                            if(inventory.getCategory().equalsIgnoreCase("seed")){
                            index+=1;
                            inventoryList.put(index,inventory.getName());
                            }
                        }
                    }
        }
        return inventoryList;
    }
    
    public Map<String,Integer> getNewSeedList(){
      Map<Integer,String> seedList=getSeedList();
      Map<String,Integer> inventoryList = new HashMap<String,Integer>();
      SeedWorkRequest seedReq = null;
      System.out.println("seedList" +seedList);
        for(String s:seedList.values()){
            System.out.println("vaues" +s);
            int Scount=0;
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
                if (org instanceof SeedOrganization){
                  for (WorkRequest request :org.getWorkQueue().getWorkRequestList()){
                      if(request instanceof SeedWorkRequest){
                          seedReq= (SeedWorkRequest) request;
                            if(seedReq.getSeedName().equalsIgnoreCase(s)){
                               Scount+=1;
                               System.out.println( "Seed Req. get name"+seedReq.getSeedName());
                           }
                        }
                    }
                }
            }
            inventoryList.put(s, Scount);
        }
        System.out.println(inventoryList);
        return inventoryList;
    }
    
    public Map<Integer,String> getFertList(){
        Map<Integer,String> inventoryList = new HashMap<Integer,String>();
        ManagerOrganization manager;
        int index=0;
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(org instanceof ManagerOrganization) {
                        manager = (ManagerOrganization) org ; 
                        for (Inventory inventory :manager.getInventoryList().getInventoryList()){
                            if(inventory.getCategory().equalsIgnoreCase("fertilizer")){
                            index+=1;
                            inventoryList.put(index,inventory.getName());
                            }
                        }
                    }
        }
        return inventoryList;
    }
    
    public Map<String,Integer> getNewFertList(){
      Map<Integer,String> fertList=getFertList();
      Map<String,Integer> inventoryList = new HashMap<String,Integer>();
      SeedWorkRequest seedReq = null;
      System.out.println("fertList" +fertList);
        for(String f:fertList.values()){
            System.out.println("vaues" +f);
            int Scount=0;
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
                if (org instanceof SeedOrganization){
                  for (WorkRequest request :org.getWorkQueue().getWorkRequestList()){
                      if(request instanceof SeedWorkRequest){
                          seedReq= (SeedWorkRequest) request;
                            if(seedReq.getSeedName().equalsIgnoreCase(f)){
                               Scount+=1;
                               System.out.println( "Fert Req. get name"+seedReq.getSeedName());
                           }
                        }
                    }
                }
            }
            inventoryList.put(f, Scount);
        }
        System.out.println(inventoryList);
        return inventoryList;
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboReport = new javax.swing.JComboBox();
        btnView = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Reports");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setText("View Report Based On:");

        comboReport.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        comboReport.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Available Seeds Quantity", "Available Fertilizer Quantity", "case 2" }));

        btnView.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Icons/arrow-back-icon.png"))); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(359, 359, 359)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBack, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)))))
                .addContainerGap(321, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(295, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
     int report=comboReport.getSelectedIndex();
        
        ManagerOrganization manager;
        SeedOrganization seed;
        
        DefaultPieDataset pieDataset= new DefaultPieDataset();
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        int seedCount=0;
        int fertCount=0;
        boolean graph=false;
        boolean bar=false;
        JFreeChart chart = null;
        
        
                    
        switch(report){
            case 0:
                for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(org instanceof ManagerOrganization) {
                        manager = (ManagerOrganization) org ; 
                        for (Inventory inventory :manager.getInventoryList().getInventoryList()){
                            
                            if(inventory.getCategory().equalsIgnoreCase("Seed")){
                                pieDataset.setValue(inventory.getName(),inventory.getQuantity());
                                chart=ChartFactory.createPieChart("Available Seeds", pieDataset,true, true, true);
                                PiePlot p=(PiePlot) chart.getPlot();
                                graph=true;
                            }
                        }
                        if(graph==true){
                            ChartFrame frame=new ChartFrame("Pie Chart",chart);
                            frame.setVisible(true);
                            frame.setSize(450, 500);
                            break;
                        }
                    }
                    if(graph==true){break;}
                }break;
                        
                        
            case 1:
                for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(org instanceof ManagerOrganization) {
                        manager = (ManagerOrganization) org ; 
                        for (Inventory inventory :manager.getInventoryList().getInventoryList()){
                            
                            if(inventory.getCategory().equalsIgnoreCase("Fertilizer")){
                                pieDataset.setValue(inventory.getName(),inventory.getQuantity());
                                chart=ChartFactory.createPieChart("Available Fertilizer", pieDataset,true, true, true);
                                PiePlot p=(PiePlot) chart.getPlot();
                                graph=true;
                            }
                        }
                        if(graph==true){
                            ChartFrame frame=new ChartFrame("Pie Chart",chart);
                            frame.setVisible(true);
                            frame.setSize(450, 500);
                            break;
                        }
                    }
                    if(graph==true){break;}
                }break;
                            
                        
                            
            case 2:
                Map<String,Integer> inventoryList =getNewSeedList();
                for (Entry<String,Integer> entry : inventoryList.entrySet()) {
                    dataset.setValue(entry.getValue(), "Seeds", entry.getKey());
                    chart=ChartFactory.createBarChart("Seeds Sales Report","Seed Name","No. of Orders",dataset,PlotOrientation.VERTICAL,false, true, false);
                    CategoryPlot p=chart.getCategoryPlot();
                    p.setRangeGridlinePaint(Color.BLACK);
                    bar=true;
                } if(bar==true){
                        ChartFrame frame=new ChartFrame("Pie Chart",chart);
                        frame.setVisible(true);
                        frame.setSize(450, 500);
                        
                    }
                break;
                
            case 3:
                Map<String,Integer> fertList =getNewFertList();
                for (Entry<String,Integer> entry : fertList.entrySet()) {
                    dataset.setValue(entry.getValue(), "Fertilizers", entry.getKey());
                    chart=ChartFactory.createBarChart("Fertilizers Sales Report","Fertilizers Name,","No. of Orders",dataset,PlotOrientation.VERTICAL,false, true, false);
                    CategoryPlot p=chart.getCategoryPlot();
                    p.setRangeGridlinePaint(Color.BLACK);
                    bar=true;
                } if(bar==true){
                        ChartFrame frame=new ChartFrame("Pie Chart",chart);
                        frame.setVisible(true);
                        frame.setSize(450, 500);
                        
                    }
                break;
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox comboReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
